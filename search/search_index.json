{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Alembic Utils Documentation : https://olirice.github.io/alembic_utils Source Code : https://github.com/olirice/alembic_utils Alembic is the defacto migration tool for use with SQLAlchemy . Without extensions, alembic can detect local changes to SQLAlchemy models and autogenerate a database migration or \"revision\" script. That revision can be applied to update the database's schema to match the SQLAlchemy model definitions. Alembic Utils is an extension to alembic that adds support for autogenerating a larger number of PostgreSQL entity types, including functions , views , materialized views , triggers , and policies . Visit the quickstart guide for usage instructions. \u2014\u2014 \u2014\u2014","title":"Introduction"},{"location":"#alembic-utils","text":"Documentation : https://olirice.github.io/alembic_utils Source Code : https://github.com/olirice/alembic_utils Alembic is the defacto migration tool for use with SQLAlchemy . Without extensions, alembic can detect local changes to SQLAlchemy models and autogenerate a database migration or \"revision\" script. That revision can be applied to update the database's schema to match the SQLAlchemy model definitions. Alembic Utils is an extension to alembic that adds support for autogenerating a larger number of PostgreSQL entity types, including functions , views , materialized views , triggers , and policies . Visit the quickstart guide for usage instructions. \u2014\u2014 \u2014\u2014","title":"Alembic Utils"},{"location":"api/","text":"API Reference alembic_utils.replaceable_entity. register_entities ( entities , schemas=None , exclude_schemas=None , entity_types=None ) Register entities to be monitored for changes when alembic is invoked with revision --autogenerate . Parameters: entities - List[ReplaceableEntity] : A list of entities (PGFunction, PGView, etc) to monitor for revisions Deprecated Parameters: Configure schema and object inclusion/exclusion with include_name and include_object in env.py . For more information see https://alembic.sqlalchemy.org/en/latest/autogenerate.html#controlling-what-to-be-autogenerated schemas - Optional[List[str]] : A list of SQL schema names to monitor. Note, schemas referenced in registered entities are automatically monitored. exclude_schemas - Optional[List[str]] : A list of SQL schemas to ignore. Note, explicitly registered entities will still be monitored. entity_types - Optional[List[Type[ReplaceableEntity]]] : A list of ReplaceableEntity classes to consider during migrations. Other entity types are ignored # migrations/env.py from alembic_utils.replaceable_entity import register_entities from app.functions import my_function from app.views import my_view register_entities ( entities = [ my_function , my_view ], exclude_schema = [ 'audit' ]) class alembic_utils.pg_function. PGFunction ( schema , signature , definition ) A PostgreSQL Function compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL function's call signature definition - str : The remainig function body and identifiers from alembic_utils.pg_function import PGFunction to_lower = PGFunction ( schema = \"public\" , signature = \"to_lower(some_text text)\" , definition = \"returns text as $$ lower(some_text) $$ language sql\" ) class alembic_utils.pg_view. PGView ( schema , signature , definition ) A PostgreSQL View compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL view's call signature definition - str : The SQL select statement body of the view from alembic_utils.pg_view import PGView scifi_books = PGView ( schema = \"public\" , signature = \"scifi_books\" , definition = \"select * from books where genre='scifi'\" ) class alembic_utils.pg_materialized_view. PGMaterializedView ( schema , signature , definition , with_data=True ) A PostgreSQL Materialized View compatible with alembic revision --autogenerate Limitations: Materialized views may not have other views or materialized views that depend on them. Parameters: schema - str : A SQL schema name signature - str : A SQL view's call signature definition - str : The SQL select statement body of the view with_data - bool : Should create and replace statements populate data from alembic_utils.pg_materialized_view import PGMaterializedView scifi_books = PGMaterializedView ( schema = \"public\" , signature = \"scifi_books\" , definition = \"select * from books where genre='scifi'\" , with_data = True ) class alembic_utils.pg_trigger. PGTrigger ( schema , signature , definition , on_entity , is_constraint=False ) A PostgreSQL Trigger compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL trigger's call signature definition - str : The remainig trigger body and identifiers on_entity - str : fully qualifed entity that the policy applies is_constraint - bool : Is the trigger a constraint trigger Postgres Create Trigger Specification: CREATE [ CONSTRAINT ] TRIGGER name { BEFORE | AFTER | INSTEAD OF } { event [ OR ... ] } ON table [ FROM referenced_table_name ] [ NOT DEFERRABLE | [ DEFERRABLE ] { INITIALLY IMMEDIATE | INITIALLY DEFERRED } ] [ FOR [ EACH ] { ROW | STATEMENT } ] [ WHEN ( condition ) ] EXECUTE PROCEDURE function_name ( arguments ) from alembic_utils.pg_trigger import PGTrigger trigger = PGTrigger ( schema = \"public\" , signature = \"lower_account_email\" , on_entity = \"public.account\" , definition = \"\"\" BEFORE INSERT ON public.account FOR EACH ROW EXECUTE FUNCTION public.downcase_email() \"\"\" , ) class alembic_utils.pg_extension. PGExtension ( schema , signature ) A PostgreSQL Extension compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A PostgreSQL extension's name from alembic_utils.pg_extension import PGExtension extension = PGExtension ( schema = \"public\" , signature = \"uuid-ossp\" , ) class alembic_utils.pg_policy. PGPolicy ( schema , signature , definition , on_entity ) A PostgreSQL Policy compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL policy name and tablename, separated by \".\" definition - str : The definition of the policy, incl. permissive, for, to, using, with check on_entity - str : fully qualifed entity that the policy applies from alembic_utils.pg_policy import PGPolicy policy = PGPolicy ( schema = \"public\" , signature = \"allow_read\" , on_entity = \"public.account\" , definition = \"\"\" AS PERMISSIVE FOR SELECT TO api_user USING (id = current_setting('api_current_user', true)::int) \"\"\" , ) class alembic_utils.pg_grant_table. PGGrantTable ( schema , table , role , grant , columns=None , with_grant_option=False ) A PostgreSQL Grant Statement compatible with alembic revision --autogenerate PGGrantTable requires the role name being used to generate migrations to match the role name that executes migrations. If your system does not meet that requirement, disable them by excluding PGGrantTable in include_object https://alembic.sqlalchemy.org/en/latest/api/runtime.html#alembic.runtime.environment.EnvironmentContext.configure.params.include_object Parameters: schema - str : A SQL schema name table - str : The table to grant access to columns - List[str] : A list of column names on table to grant access to role - str : The role to grant access to grant - Union[Grant, str] : On of SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER with_grant_option - bool : Can the role grant access to other roles from alembic_utils.pg_grant_table import PGGrantTable grant = PGGrantTable ( schema = \"public\" , table = \"account\" , columns = [ \"id\" , \"email\" ], role = \"anon_user\" , grant = 'SELECT' , with_grant_option = False , )","title":"API Reference"},{"location":"api/#api-reference","text":"alembic_utils.replaceable_entity. register_entities ( entities , schemas=None , exclude_schemas=None , entity_types=None ) Register entities to be monitored for changes when alembic is invoked with revision --autogenerate . Parameters: entities - List[ReplaceableEntity] : A list of entities (PGFunction, PGView, etc) to monitor for revisions Deprecated Parameters: Configure schema and object inclusion/exclusion with include_name and include_object in env.py . For more information see https://alembic.sqlalchemy.org/en/latest/autogenerate.html#controlling-what-to-be-autogenerated schemas - Optional[List[str]] : A list of SQL schema names to monitor. Note, schemas referenced in registered entities are automatically monitored. exclude_schemas - Optional[List[str]] : A list of SQL schemas to ignore. Note, explicitly registered entities will still be monitored. entity_types - Optional[List[Type[ReplaceableEntity]]] : A list of ReplaceableEntity classes to consider during migrations. Other entity types are ignored # migrations/env.py from alembic_utils.replaceable_entity import register_entities from app.functions import my_function from app.views import my_view register_entities ( entities = [ my_function , my_view ], exclude_schema = [ 'audit' ]) class alembic_utils.pg_function. PGFunction ( schema , signature , definition ) A PostgreSQL Function compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL function's call signature definition - str : The remainig function body and identifiers from alembic_utils.pg_function import PGFunction to_lower = PGFunction ( schema = \"public\" , signature = \"to_lower(some_text text)\" , definition = \"returns text as $$ lower(some_text) $$ language sql\" ) class alembic_utils.pg_view. PGView ( schema , signature , definition ) A PostgreSQL View compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL view's call signature definition - str : The SQL select statement body of the view from alembic_utils.pg_view import PGView scifi_books = PGView ( schema = \"public\" , signature = \"scifi_books\" , definition = \"select * from books where genre='scifi'\" ) class alembic_utils.pg_materialized_view. PGMaterializedView ( schema , signature , definition , with_data=True ) A PostgreSQL Materialized View compatible with alembic revision --autogenerate Limitations: Materialized views may not have other views or materialized views that depend on them. Parameters: schema - str : A SQL schema name signature - str : A SQL view's call signature definition - str : The SQL select statement body of the view with_data - bool : Should create and replace statements populate data from alembic_utils.pg_materialized_view import PGMaterializedView scifi_books = PGMaterializedView ( schema = \"public\" , signature = \"scifi_books\" , definition = \"select * from books where genre='scifi'\" , with_data = True ) class alembic_utils.pg_trigger. PGTrigger ( schema , signature , definition , on_entity , is_constraint=False ) A PostgreSQL Trigger compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL trigger's call signature definition - str : The remainig trigger body and identifiers on_entity - str : fully qualifed entity that the policy applies is_constraint - bool : Is the trigger a constraint trigger Postgres Create Trigger Specification: CREATE [ CONSTRAINT ] TRIGGER name { BEFORE | AFTER | INSTEAD OF } { event [ OR ... ] } ON table [ FROM referenced_table_name ] [ NOT DEFERRABLE | [ DEFERRABLE ] { INITIALLY IMMEDIATE | INITIALLY DEFERRED } ] [ FOR [ EACH ] { ROW | STATEMENT } ] [ WHEN ( condition ) ] EXECUTE PROCEDURE function_name ( arguments ) from alembic_utils.pg_trigger import PGTrigger trigger = PGTrigger ( schema = \"public\" , signature = \"lower_account_email\" , on_entity = \"public.account\" , definition = \"\"\" BEFORE INSERT ON public.account FOR EACH ROW EXECUTE FUNCTION public.downcase_email() \"\"\" , ) class alembic_utils.pg_extension. PGExtension ( schema , signature ) A PostgreSQL Extension compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A PostgreSQL extension's name from alembic_utils.pg_extension import PGExtension extension = PGExtension ( schema = \"public\" , signature = \"uuid-ossp\" , ) class alembic_utils.pg_policy. PGPolicy ( schema , signature , definition , on_entity ) A PostgreSQL Policy compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL policy name and tablename, separated by \".\" definition - str : The definition of the policy, incl. permissive, for, to, using, with check on_entity - str : fully qualifed entity that the policy applies from alembic_utils.pg_policy import PGPolicy policy = PGPolicy ( schema = \"public\" , signature = \"allow_read\" , on_entity = \"public.account\" , definition = \"\"\" AS PERMISSIVE FOR SELECT TO api_user USING (id = current_setting('api_current_user', true)::int) \"\"\" , ) class alembic_utils.pg_grant_table. PGGrantTable ( schema , table , role , grant , columns=None , with_grant_option=False ) A PostgreSQL Grant Statement compatible with alembic revision --autogenerate PGGrantTable requires the role name being used to generate migrations to match the role name that executes migrations. If your system does not meet that requirement, disable them by excluding PGGrantTable in include_object https://alembic.sqlalchemy.org/en/latest/api/runtime.html#alembic.runtime.environment.EnvironmentContext.configure.params.include_object Parameters: schema - str : A SQL schema name table - str : The table to grant access to columns - List[str] : A list of column names on table to grant access to role - str : The role to grant access to grant - Union[Grant, str] : On of SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER with_grant_option - bool : Can the role grant access to other roles from alembic_utils.pg_grant_table import PGGrantTable grant = PGGrantTable ( schema = \"public\" , table = \"account\" , columns = [ \"id\" , \"email\" ], role = \"anon_user\" , grant = 'SELECT' , with_grant_option = False , )","title":"API Reference"},{"location":"config/","text":"Configuration Controlling output of an --autogenerate revision is limited to including or excluding objects. By default, all schemas in the target database are included. Selectively filtering alembic_utils objects can acheived using the include_name and include_object callables in env.py . For more information see controlling-what-to-be-autogenerated Examples The following examples perform common filtering tasks. Whitelist of Schemas Only include schemas from schemas named public and bi . # env.py def include_name ( name , type_ , parent_names ) -> bool : if type_ == \"schema\" : return name in [ \"public\" , \"bi\" ] return True context . configure ( # ... include_schemas = True , include_name = include_name ) Exclude PGFunctions Don't produce migrations for PGFunction entities. # env.py def include_object ( object , name , type_ , reflected , compare_to ) -> bool : if isinstance ( object , PGFunction ): return False return True context . configure ( # ... include_object = include_object )","title":"Configuration"},{"location":"config/#configuration","text":"Controlling output of an --autogenerate revision is limited to including or excluding objects. By default, all schemas in the target database are included. Selectively filtering alembic_utils objects can acheived using the include_name and include_object callables in env.py . For more information see controlling-what-to-be-autogenerated","title":"Configuration"},{"location":"config/#examples","text":"The following examples perform common filtering tasks.","title":"Examples"},{"location":"config/#whitelist-of-schemas","text":"Only include schemas from schemas named public and bi . # env.py def include_name ( name , type_ , parent_names ) -> bool : if type_ == \"schema\" : return name in [ \"public\" , \"bi\" ] return True context . configure ( # ... include_schemas = True , include_name = include_name )","title":"Whitelist of Schemas"},{"location":"config/#exclude-pgfunctions","text":"Don't produce migrations for PGFunction entities. # env.py def include_object ( object , name , type_ , reflected , compare_to ) -> bool : if isinstance ( object , PGFunction ): return False return True context . configure ( # ... include_object = include_object )","title":"Exclude PGFunctions"},{"location":"examples/","text":"Example Outputs Migration for newly created function \"\"\"create Revision ID: 1 Revises: Create Date: 2020-04-22 09:24:25.556995 \"\"\" from alembic import op import sqlalchemy as sa from alembic_utils.pg_function import PGFunction # revision identifiers, used by Alembic. revision = '1' down_revision = None branch_labels = None depends_on = None def upgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\" returns text as $$ select upper(some_text) $$ language SQL; \"\"\" ) op . create_entity ( public_to_upper_6fa0de ) def downgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"# Not Used\" ) op . drop_entity ( public_to_upper_6fa0de ) Migration for updated Function \"\"\"replace Revision ID: 2 Revises: 1 Create Date: 2020-04-22 09:24:25.679031 \"\"\" from alembic import op import sqlalchemy as sa from alembic_utils.pg_function import PGFunction # revision identifiers, used by Alembic. revision = '2' down_revision = '1' branch_labels = None depends_on = None def upgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\" returns text as $$ select upper(some_text) || 'def' $$ language SQL; \"\"\" ) op . replace_entity ( public_to_upper_6fa0de ) def downgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\"returns text LANGUAGE sql AS $function$ select upper(some_text) || 'abc' $function$\"\"\" ) op . replace_entity ( public_to_upper_6fa0de )","title":"Examples"},{"location":"examples/#example-outputs","text":"","title":"Example Outputs"},{"location":"examples/#migration-for-newly-created-function","text":"\"\"\"create Revision ID: 1 Revises: Create Date: 2020-04-22 09:24:25.556995 \"\"\" from alembic import op import sqlalchemy as sa from alembic_utils.pg_function import PGFunction # revision identifiers, used by Alembic. revision = '1' down_revision = None branch_labels = None depends_on = None def upgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\" returns text as $$ select upper(some_text) $$ language SQL; \"\"\" ) op . create_entity ( public_to_upper_6fa0de ) def downgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"# Not Used\" ) op . drop_entity ( public_to_upper_6fa0de )","title":"Migration for newly created function"},{"location":"examples/#migration-for-updated-function","text":"\"\"\"replace Revision ID: 2 Revises: 1 Create Date: 2020-04-22 09:24:25.679031 \"\"\" from alembic import op import sqlalchemy as sa from alembic_utils.pg_function import PGFunction # revision identifiers, used by Alembic. revision = '2' down_revision = '1' branch_labels = None depends_on = None def upgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\" returns text as $$ select upper(some_text) || 'def' $$ language SQL; \"\"\" ) op . replace_entity ( public_to_upper_6fa0de ) def downgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\"returns text LANGUAGE sql AS $function$ select upper(some_text) || 'abc' $function$\"\"\" ) op . replace_entity ( public_to_upper_6fa0de )","title":"Migration for updated Function"},{"location":"quickstart/","text":"Quickstart Installation Requirements Python 3.6+ First, install alembic_utils $ pip install alembic_utils Next, add \"alembic_utils\" to the logger keys in alembic.ini and a configuration for it. ... [ loggers ] keys = root , sqlalchemy , alembic , alembic_utils [ logger_alembic_utils ] level = INFO handlers = qualname = alembic_utils Reference Then add a function to your project # my_function.py from alembic_utils.pg_function import PGFunction to_upper = PGFunction ( schema = 'public' , signature = 'to_upper(some_text text)' , definition = \"\"\" RETURNS text as $$ SELECT upper(some_text) $$ language SQL; \"\"\" ) and/or a view # my_view.py from alembic_utils.pg_view import PGView first_view = PGView ( schema = \"public\" , signature = \"first_view\" , definition = \"select * from information_schema.tables\" , ) Finally, update your <migrations_folder>/env.py to register your entities with alembic_utils. # <migrations_folder>/env.py # Add these lines from alembic_utils.replaceable_entity import register_entities from my_function import to_upper from my_view import first_view register_entities ([ to_upper , first_view ]) You're done! The next time you autogenerate a revision with alembic revision --autogenerate -m 'some message' Alembic will detect if your entities are new, updated, or removed & populate the revision's upgrade and downgrade sections automatically. For example outputs, check the examples .","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"Requirements Python 3.6+ First, install alembic_utils $ pip install alembic_utils Next, add \"alembic_utils\" to the logger keys in alembic.ini and a configuration for it. ... [ loggers ] keys = root , sqlalchemy , alembic , alembic_utils [ logger_alembic_utils ] level = INFO handlers = qualname = alembic_utils","title":"Installation"},{"location":"quickstart/#reference","text":"Then add a function to your project # my_function.py from alembic_utils.pg_function import PGFunction to_upper = PGFunction ( schema = 'public' , signature = 'to_upper(some_text text)' , definition = \"\"\" RETURNS text as $$ SELECT upper(some_text) $$ language SQL; \"\"\" ) and/or a view # my_view.py from alembic_utils.pg_view import PGView first_view = PGView ( schema = \"public\" , signature = \"first_view\" , definition = \"select * from information_schema.tables\" , ) Finally, update your <migrations_folder>/env.py to register your entities with alembic_utils. # <migrations_folder>/env.py # Add these lines from alembic_utils.replaceable_entity import register_entities from my_function import to_upper from my_view import first_view register_entities ([ to_upper , first_view ]) You're done! The next time you autogenerate a revision with alembic revision --autogenerate -m 'some message' Alembic will detect if your entities are new, updated, or removed & populate the revision's upgrade and downgrade sections automatically. For example outputs, check the examples .","title":"Reference"}]}